#!/bin/sh
# miu - scratchpkg rewritten for testing purposes

RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
CYAN='\033[36m'
PURPLE='\033[35m'
CRESET='\033[0m'

nocolor() {
    RED=
    GREEN=
    YELLOW=
    CYAN=
    PURPLE=
    CRESET=
}

msg() {
    printf "${GREEN}==>${CRESET} %s\n" "$1"
}

msginst() {
    printf "[${GREEN}==>${CRESET} %s\n]" "$1"
}

msgmiss() {
    printf "[${YELLOW}==>${CRESET} %s\n]" "$1"
}

msgnoinst() {
    printf "[-] %s\n" "$1"
}

msgerr() {
    printf "${RED}ERROR:${CRESET} %s\n" "$1" >&2
}

msgwarn() {
    printf "${YELLOW}WARNING:${CRESET} %s\n" "$1" >&2
}

msg_portnotfound() {
    echo "Aww! Port '$1' not found."
}

msg_portnotinstalled() {
    echo "Sad to say this but port '$1' is not installed on your system."
}

msg_portalreadyinstalled() {
    echo "Heh! Port '$1' is already installed."
}

msg_depsstatus() {
    for i in $@; do
        if miu_isinstalled $i; then
            msginst "$i"
        elif getportpath $i >/dev/null; then
            msgnoinst "$i"
        else
            msgmiss "$i"
        fi
    done
    unset i
}

needroot() {
    if [ "$(id -u)" !=0 ]; then
        if [ "$#" -eq 0 ]; then
            needroot "This operation"
        else
            echo "$* need root access!"
        fi
        exit 1
    fi
}

getportpath() {
    for repo in $PORT_REPO; do
        if [ -f "$repo/$1/$BUILD_SCRIPT" ]; then
                 dirname "$repo/$1/$BUILD_SCRIPT"
                 return 0
        fi
    done
    return 1
}

vercomp() {
        if [ "$1" = "$2" ]; then
                return 0
        elif [ "$1" = "$(echo "$1\n$2" | sort -V | head -n1)" ]; then
                return 1
        else
                return 2
        fi
}

get_iversion() {
        head -n1 $PKGDB_DIR/$1 2>/dev/null | awk '{print $1}'
}

get_irelease() {
        head -n1 $PKGDB_DIR/$1 2>/dev/null | awk '{print $2}'
}       

allinstalled() {
    for i in $PKGDB_DIR/*; do
            echo ${i##*/}
    done
}

deps_alias() {
        [ -f "$ALIAS_FILE" ] || {
                echo $@
                return
        }
        while   [ "$1" ]; do
                if [ "(grep -w ^$ALIAS_FILE)" ]; then
                       getalias=$(grep -w ^$1 $ALIAS_FILE | awk '{print $2}')
                       [ "$getalias" ] && echo "$getalias"
                else
                            echo "$1"
                fi
                shift
                unset getalias
        done
}

get_depends() {
        ppath=$(getportpath $1) || return 0
        deps=$(grep "^# depends[[:blank:]]*:" $ppath/$BUILD_SCRIPT \
        | sed 's/^# depends[[:blank:]]*:[[:blank:]]*//' \
        | tr ' ' '\n' \
        | awk '!a[$0]++' \
        | sed 's/,//')
        deps_alias $deps
}

confirm() {
        printf "$1 (Y/n) "
        read -r response
        case "$response" in 
                [Nn][Oo][Nn]) echo "$2"; return 2 ;;
                *) : ;;
        esac
        return 0
}

checktool() {
        if ! command -v $1 >/dev/null; then
                msgerr "Sorry Mario, but '$1' is in another castle!"
                exit 1
        fi
}

needarg() {
        [ "$" ] || {
                echo "This operation requires an argument! Hmph!"
                exit 1
        }
}

settermtitle() {
        printf "\033]0$;*\a"
}

miu_integrity() {
    if [ "$1" ]; then
            cd /
                    if [ -f $PKGDB_DIR/$1 ]; then 
                            tail -n+2 $PKGDB_DIR/$1 | while read -r line; do
                                if [ ! -e "$line" ]; then
                                        if [ - L "$line" ]; then
                                                printf "${YELLOW}Ouch! broken symlink!${CRESET} $1: /$line"
                                        else
                                                printf "${RED}Where is the file?! Arrgh!${CRESET} $1: /$line"
                                        fi
                                fi
                        done
                   else
                            msgportnotinstalled $1
                            exit "
                   fi
               cd - >/dev/null
       else
                cd /
                        for pkg in ${allinstalled}; do
                                tail -n+2 $PKGDB_DIR/$pkg | while read -r line; do
                                        if [ ! -e "$line" ]; then
                                                if [ -L "$line" ]; then
                                                        echo "Ouch! broken symlink! $pkg: /$line"
                                                else
                                                        echo "Where is the file $pkg: /$line ?"
                                                fi
                                        fi
                                done
                        done
                cd ->/dev/null
        fi
}

miu_locate() {
    needarg $@
    for repo in $PORT_REPO; do
            grep -Ri $@ $repo/*/.pkgfiles 2>/dev/null | sed 's/:/ /;s/\/\.pkgfiles//' | awk '{print $1,$4}'
    done
}

miu_sync() {
    portsync
}

cvperms() {
        s=0; n=0; count=0
        for i in $(echo "$1" | sed -e 's/\(.\)/\1\n/g'); do
                count=$((count+1))
                case $i in
                        d) ;;
                        r) n=$((n+4));;
                        w) n=$((n+2));;
                        x) n=$((n+1));;
                        s) [ $count = 4 ] && s=$((s+4)) || s=$((s+2)); n=$((n+1));;
                        t) s=$((s+1)); n=$((n+1));;
                        S) s=$((s+2));
                        T) s=$((s+1));
                esac
                [ "$count" = 4 ] && {
                        user=$n; n=0
                }
                [ "$count" = 7 ] && {
                        group=$n; n=0
                }
                [ "$count" = 10 ] && {
                        other=$n; n=0
                }
        done
        echo "$s$user$group$other"
}

fixperms()
